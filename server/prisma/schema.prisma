// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(100)
  address  String
  email    String @unique @db.VarChar(100)
  username String @unique @db.VarChar(100)
  password String @db.VarChar(100)

  @@map("admins")
}

model Attendance {
  id         Int       @id @default(autoincrement())
  clockin    DateTime?  @db.DateTime()
  clockout   DateTime? @db.DateTime()
  location   String
  deduction  Int?
  employeeId Int?      @unique
  employee   Employee? @relation(fields: [employeeId], references: [id])

  @@map("attendances")
}

model Employee {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(100)
  address    String
  email      String       @unique @db.VarChar(100)
  username   String       @unique @db.VarChar(100)
  password   String       @db.VarChar(100)
  leave      Int?
  positionId Int?
  position   Position?    @relation(fields: [positionId], references: [id])
  shiftId    Int?
  shift      Shift?       @relation(fields: [shiftId], references: [id])
  attendance Attendance[]

  @@map("employees")
}

model Position {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(100)
  salary   Int
  employee Employee[]

  @@map("positions")
}

model Shift {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  startShift DateTime   @db.Time()
  endShift   DateTime   @db.Time()
  employee   Employee[]

  @@map("shifts")
}
